{"version":3,"sources":["components/Fighter.js","components/Fighters.js","components/Navbar.js","components/Jumbotron.js","components/Score.js","App.js","serviceWorker.js","index.js"],"names":["Fighter","this","props","fighter","id","image","name","className","src","alt","style","charCard","onClick","bind","React","Component","padding","cursor","width","border","Fighters","shuffleFighters","char","i","length","f","Math","floor","random","temp","shuffleChar","fighters","map","key","Navbar","href","Jumbotron","Score","Fragment","score","topScore","App","state","clicked","setState","checkFighter","alert","resetScore","checkScore","incrementScore","resetGame","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1444dfb.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Fighter extends React.Component {\n  render() {\n    const { id, image, name } = this.props.fighter;\n    return (\n      <span>\n        <img\n          className=\"fighter\"\n          src={image}\n          id={id}\n          alt={name}\n          style={charCard}\n          onClick={this.props.onClick.bind(this, id)}\n        />\n      </span>\n    );\n  }\n}\n\nconst charCard = {\n  padding: \"5px\",\n  cursor: \"pointer\",\n  width: \"400px\",\n  border: \"solid\"\n};\n\nFighter.propTypes = {\n  fighter: PropTypes.object.isRequired,\n  onClick: PropTypes.func.isRequired\n};\n\nexport default Fighter;\n","import React from \"react\";\nimport Fighter from \"./Fighter\";\nimport PropTypes from \"prop-types\";\nimport \"./fighter.css\";\n\nconst shuffleChar = char => {\n  let i = char.length - 1;\n  for (; i > 0; i--) {\n    const f = Math.floor(Math.random() * (i + 1));\n    const temp = char[i];\n    char[i] = char[f];\n    char[f] = temp;\n  }\n  return char;\n};\n\nclass Fighters extends React.Component {\n  render() {\n    const shuffleFighters = shuffleChar(this.props.fighters);\n    return (\n      <div className=\"fighter-box\">\n        {shuffleFighters.map(fighter => (\n          <Fighter\n            key={fighter.id}\n            fighter={fighter}\n            alt={fighter.name}\n            onClick={this.props.onClick}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nFighters.propTypes = {\n  fighters: PropTypes.array.isRequired,\n  onClick: PropTypes.func.isRequired\n};\n\nexport default Fighters;\n","import React from \"react\";\nimport \"./navbar.css\";\n\nclass Navbar extends React.Component {\n  render() {\n    return (\n      <section\n        // style={{\n        //   backgroundImage: \"url(./images/smashbros.png)\",\n        //   display: \"flex\"\n        // }}\n        className=\"top\"\n      >\n        <img className=\"header\" src=\"./images/smashbros.png\" />\n\n        <a className=\"title\" href=\"/\">\n          <img\n            src=\"https://fontmeme.com/permalink/200406/54cf4cc89e0161263aa403e241583cf5.png\"\n            alt=\"super-smash-bros-font\"\n            border=\"0\"\n          />\n        </a>\n\n        {/* <a href=\"/\"> */}\n        {/* <img src=\"https://fontmeme.com/images/super-smash-bros-latest-logo-min.png\" /> */}\n        {/* <h1 style={headerStyle}>Smash That Clicky</h1> */}\n        {/* </a> */}\n\n        <a className=\"logo\" href=\"https://www.smashbros.com/en_US/index.html\">\n          <img\n            src=\"./images/pngkey.com-smash-bros-logo-png-2256701.png\"\n            alt=\"Super Smash Bros Logo\"\n            width=\"10%\"\n            style={{ cursor: \"pointer\" }}\n          />\n        </a>\n      </section>\n    );\n  }\n}\n\nconst headerStyle = {\n  color: \"black\",\n  textAlign: \"center\",\n  padding: \"10px\",\n  textDecoration: \"underline\",\n  float: \"left\"\n};\n\nexport default Navbar;\n","import React from \"react\";\n\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron-fluid mb-3\">\n      <img\n        src=\"./images/989175.jpg\"\n        height=\"5%\"\n        width=\"100%\"\n        alt=\"Super Smash Bros Logo\"\n      />\n    </div>\n  );\n}\n\n// const jumbolooks = {\n//   backgroundImage: \"url(./images/989175.jpg)\",\n//   height: \"20%\"\n// };\n\nexport default Jumbotron;\n","import React from \"react\";\n\nclass Score extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"text-center mb-3\">\n          <span className=\"score mx-1\">Score: {this.props.score}</span> |\n          <span className=\"top-score mx-1\">\n            Top Score: {this.props.topScore}\n          </span>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Score;\n","import React from \"react\";\nimport Fighters from \"./components/Fighters\";\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Score from \"./components/Score\";\n\nclass App extends React.Component {\n  state = {\n    score: 0,\n    topScore: 0,\n    fighters: [\n      {\n        id: 1,\n        name: \"mario\",\n        image: \"./images/mario.png\",\n        clicked: false\n      },\n      {\n        id: 2,\n        name: \"luigi\",\n        image: \"./images/luigi.png\",\n        clicked: false\n      },\n      {\n        id: 3,\n        name: \"pikachu\",\n        image: \"./images/pikachu.png\",\n        clicked: false\n      },\n      {\n        id: 4,\n        name: \"samus\",\n        image: \"./images/samus.png\",\n        clicked: false\n      },\n      {\n        id: 5,\n        name: \"captain_falcon\",\n        image: \"./images/captain_falcon.png\",\n        clicked: false\n      },\n      { id: 6, name: \"fox\", image: \"./images/fox.png\", clicked: false },\n      {\n        id: 7,\n        name: \"donkey_kong\",\n        image: \"./images/donkey_kong.png\",\n        clicked: false\n      },\n      {\n        id: 8,\n        name: \"bowser\",\n        image: \"./images/bowser.png\",\n        clicked: false\n      },\n      {\n        id: 9,\n        name: \"sheik\",\n        image: \"./images/sheik.png\",\n        clicked: false\n      },\n      {\n        id: 10,\n        name: \"link\",\n        image: \"./images/link.png\",\n        clicked: false\n      },\n      {\n        id: 11,\n        name: \"ganondorf\",\n        image: \"./images/ganondorf.png\",\n        clicked: false\n      },\n      {\n        id: 12,\n        name: \"wario\",\n        image: \"./images/wario.png\",\n        clicked: false\n      }\n    ]\n  };\n\n  onClick = id => {\n    this.setState({\n      fighters: this.state.fighters.map(fighter => {\n        if (fighter.id === id) {\n          this.checkFighter(fighter);\n        }\n        return fighter;\n      })\n    });\n  };\n\n  checkFighter = fighter => {\n    if (fighter.clicked === true) {\n      alert(\"You have been DEFEATED\");\n      this.setState({\n        fighters: this.state.fighters.map(fighter => {\n          fighter.clicked = false;\n          return fighter;\n        })\n      });\n      this.resetScore();\n      this.checkScore(this.state.score, this.state.topScore);\n    } else {\n      fighter.clicked = true;\n      this.incrementScore();\n    }\n  };\n\n  incrementScore = () => {\n    this.setState({ score: this.state.score + 1 });\n  };\n\n  resetScore = () => {\n    this.setState({ score: 0 });\n  };\n\n  checkScore = (score, topScore) => {\n    if (score > topScore) {\n      this.setState({ topScore: score });\n    } else if (score === 12) {\n      alert(\"VICTORY!\");\n    }\n  };\n\n  resetGame = clicked => {\n    if (clicked) {\n      this.setState({ clicked: false });\n      alert(\"You won!\");\n      this.resetScore();\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar topScore={this.state.topScore} />\n\n        <Score score={this.state.score} topScore={this.state.topScore} />\n        <Fighters fighters={this.state.fighters} onClick={this.onClick} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}